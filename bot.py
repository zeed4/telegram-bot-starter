#!/usr/bin/env python
# pylint: disable=unused-argument
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.

First, a few handler functions are defined. Then, those functions are passed to
the Application and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.

Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import os
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üé≤ –Ø –±–æ—Ç –¥–ª—è DnD. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /roll, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫.\n–ü—Ä–∏–º–µ—Ä: /roll 1d20"
    )

# –ö–æ–º–∞–Ω–¥–∞ /roll
async def roll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /roll 1d20 –∏–ª–∏ /roll 2d6")
        return
    try:
        count, die = context.args[0].lower().split('d')
        count = int(count)
        die = int(die)
        rolls = [random.randint(1, die) for _ in range(count)]
        await update.message.reply_text(f'üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {rolls} (—Å—É–º–º–∞: {sum(rolls)})')
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /roll 2d6")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    token = os.environ["BOT_TOKEN"]
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("roll", roll))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
